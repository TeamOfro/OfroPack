name: Add Custom Model from Issue

on:
  issues:
    types: [opened]

jobs:
  parse-and-add:
    if: contains(github.event.issue.labels.*.name, 'custom-model')
    # imagemagick is pre-installed on ubuntu-22.04
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;

            // Parse materials (required)
            const materialsMatch = issueBody.match(/###\s*Materials\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!materialsMatch) {
              core.setFailed('Materials field not found in issue');
              return;
            }
            const materials = materialsMatch[1].trim();

            // Parse custom model data (required)
            const cmdMatch = issueBody.match(/###\s*Custom Model Data\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!cmdMatch) {
              core.setFailed('Custom Model Data field not found in issue');
              return;
            }
            const customModelData = cmdMatch[1].trim();
            if (customModelData === '_No response_' || customModelData === '') {
              core.setFailed('Custom Model Data is required');
              return;
            }

            // Parse image URL (required)
            const imageMatch = issueBody.match(/###\s*Image URL\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!imageMatch) {
              core.setFailed('Image URL field not found in issue');
              return;
            }
            const imageUrl = imageMatch[1].trim();

            core.setOutput('materials', materials);
            core.setOutput('custom_model_data', customModelData);
            core.setOutput('image_url', imageUrl);

            // Add reaction to show processing started
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: 'rocket'
            });

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Download image
        run: |
          set -euo pipefail
          IMAGE_URL="${{ steps.parse.outputs.image_url }}"
          IMAGE_NAME="${{ steps.parse.outputs.custom_model_data }}.png"

          HTTP_CODE=$(curl -sSL -w "%{http_code}" -o "$IMAGE_NAME" "$IMAGE_URL")

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error: Failed to download image. HTTP status: $HTTP_CODE"
            rm -f "$IMAGE_NAME"
            exit 1
          fi

          if ! file "$IMAGE_NAME" | grep -q "PNG image"; then
            echo "Error: Downloaded file is not a valid PNG image"
            head -5 "$IMAGE_NAME" || true
            rm -f "$IMAGE_NAME"
            exit 1
          fi

          echo "IMAGE_FILE=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build tool
        run: cargo build --release

      - name: Run processor
        run: |
          set -euo pipefail
          MATERIALS="${{ steps.parse.outputs.materials }}"
          CUSTOM_MODEL_DATA="${{ steps.parse.outputs.custom_model_data }}"

          ARGS=""
          IFS=',' read -ra MATERIAL_ARRAY <<< "$MATERIALS"
          for material in "${MATERIAL_ARRAY[@]}"; do
            material=$(echo "$material" | xargs)
            ARGS="$ARGS -m $material"
          done

          if [ -n "$CUSTOM_MODEL_DATA" ]; then
            ARGS="$ARGS -c $CUSTOM_MODEL_DATA"
          fi

          ./target/release/processer $ARGS "$IMAGE_FILE"

      - name: Generate preview image (256x256, nearest-neighbor)
        run: |
          set -euo pipefail
          SRC="assets/minecraft/textures/item/${{ steps.parse.outputs.custom_model_data }}.png"
          PREVIEW_DIR="preview"
          PREVIEW_FILE="${PREVIEW_DIR}/${{ steps.parse.outputs.custom_model_data }}.png"

          if [ ! -f "$SRC" ]; then
            echo "Error: Source PNG not found at $SRC"
            exit 1
          fi

          # Create preview directory
          mkdir -p "$PREVIEW_DIR"

          # Generate 256x256 preview with nearest-neighbor (pixel-perfect)
          magick "$SRC" -filter point -resize 256x256 -strip "$PREVIEW_FILE"

          echo "Preview generated at $PREVIEW_FILE"
          echo "PREVIEW_FILE=$PREVIEW_FILE" >> $GITHUB_ENV

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add custom model data from issue #${{ github.event.issue.number }}"
          title: "Add custom model: ${{ steps.parse.outputs.custom_model_data }}"
          body: |
            ## Custom Model Data Addition

            Resolves #${{ github.event.issue.number }}

            - **Materials**: ${{ steps.parse.outputs.materials }}
            - **Custom Model Data**: ${{ steps.parse.outputs.custom_model_data }}
            - **Image URL**: ${{ steps.parse.outputs.image_url }}

            ### Preview (256x256, pixel-perfect)

            ![Custom Model Preview](${{ env.PREVIEW_FILE }})

            ---

            This PR was automatically generated from the issue.
          branch: custom-model/issue-${{ github.event.issue.number }}
          delete-branch: true
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>

      - name: Get preview URL from PR branch
        id: preview_url
        run: |
          BRANCH="custom-model/issue-${{ github.event.issue.number }}"
          PREVIEW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${BRANCH}/${{ env.PREVIEW_FILE }}"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $PREVIEW_URL"

      - name: Comment on issue
        if: steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview_url.outputs.url }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Custom model data has been processed!\n\n**Pull Request:** #${{ steps.create_pr.outputs['pull-request-number'] }}\n\n### Preview (256x256, pixel-perfect)\n\n![Custom Model Preview](${previewUrl})\n\nPlease review and merge the PR to add the custom model data.`
            });

            // Add success reaction
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '+1'
            });

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ Failed to process custom model data. Please check the workflow logs for details.\n\n**Please create a new issue with the correct information.** Do not edit this issue.`
            });

            // Add failure reaction
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '-1'
            });

            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
