name: Add Custom Model from Issue

on:
  issues:
    types: [opened]

env:
  # Common variables
  ISSUE_NUMBER: ${{ github.event.issue.number }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  parse-and-add:
    if: contains(github.event.issue.labels.*.name, 'custom-model')
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    env:
      # Job-specific variables
      PR_BRANCH: custom-model/issue-${{ github.event.issue.number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;

            // Parse materials (required)
            const materialsMatch = issueBody.match(/###\s*Materials\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!materialsMatch) {
              core.setFailed('Materials field not found in issue');
              return;
            }
            const materials = materialsMatch[1].trim();

            // Parse custom model data (required)
            const cmdMatch = issueBody.match(/###\s*Custom Model Data\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!cmdMatch) {
              core.setFailed('Custom Model Data field not found in issue');
              return;
            }
            const customModelData = cmdMatch[1].trim();
            if (customModelData === '_No response_' || customModelData === '') {
              core.setFailed('Custom Model Data is required');
              return;
            }

            // Parse image URL (required)
            const imageMatch = issueBody.match(/###\s*Image URL\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!imageMatch) {
              core.setFailed('Image URL field not found in issue');
              return;
            }
            const imageUrl = imageMatch[1].trim();

            core.setOutput('materials', materials);
            core.setOutput('custom_model_data', customModelData);
            core.setOutput('image_url', imageUrl);

            // Add reaction to show processing started
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: 'rocket'
            });

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Download and validate image
        run: |
          set -euo pipefail
          IMAGE_URL="${{ steps.parse.outputs.image_url }}"
          IMAGE_FILE="${{ steps.parse.outputs.custom_model_data }}.png"
          
          echo "Downloading image from: $IMAGE_URL"
          HTTP_CODE=$(curl -sSL -w "%{http_code}" -o "$IMAGE_FILE" "$IMAGE_URL")
          
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "::error::Failed to download image (HTTP $HTTP_CODE)"
            rm -f "$IMAGE_FILE"
            exit 1
          fi
          
          if ! file "$IMAGE_FILE" | grep -q "PNG image"; then
            echo "::error::Downloaded file is not a valid PNG image"
            head -5 "$IMAGE_FILE" || true
            rm -f "$IMAGE_FILE"
            exit 1
          fi
          
          echo "‚úì Image downloaded and validated"
          echo "IMAGE_FILE=$IMAGE_FILE" >> $GITHUB_ENV

      - name: Build processor tool
        run: |
          echo "Building Rust processor..."
          cargo build --release
          echo "‚úì Build complete"

      - name: Process custom model data
        run: |
          set -euo pipefail
          
          # Build arguments for materials
          ARGS=""
          IFS=',' read -ra MATERIALS <<< "${{ steps.parse.outputs.materials }}"
          for material in "${MATERIALS[@]}"; do
            material=$(echo "$material" | xargs)  # trim whitespace
            ARGS="$ARGS -m $material"
          done
          
          # Run the processor with 'add' subcommand
          echo "Running processor: add $ARGS -c ${{ steps.parse.outputs.custom_model_data }} $IMAGE_FILE"
          ./target/release/processer add $ARGS -c "${{ steps.parse.outputs.custom_model_data }}" "$IMAGE_FILE"
          echo "‚úì Custom model data processed"

      - name: Generate preview image
        run: |
          set -euo pipefail
          
          MODEL_NAME="${{ steps.parse.outputs.custom_model_data }}"
          SRC="assets/minecraft/textures/item/${MODEL_NAME}.png"
          PREVIEW_DIR="preview"
          PREVIEW_FILE="${PREVIEW_DIR}/${MODEL_NAME}.png"
          
          if [ ! -f "$SRC" ]; then
            echo "::error::Source texture not found: $SRC"
            exit 1
          fi
          
          mkdir -p "$PREVIEW_DIR"
          
          # Generate 256x256 preview with nearest-neighbor interpolation (pixel-perfect)
          convert "$SRC" -filter point -resize 256x256 -strip "$PREVIEW_FILE"
          
          # Generate preview URL for GitHub raw content
          PREVIEW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ env.PR_BRANCH }}/${PREVIEW_FILE}"
          
          echo "‚úì Preview generated: $PREVIEW_FILE"
          echo "Preview URL: $PREVIEW_URL"
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add custom model: ${{ steps.parse.outputs.custom_model_data }} (#${{ env.ISSUE_NUMBER }})"
          title: "‚ú® Add custom model: ${{ steps.parse.outputs.custom_model_data }}"
          body: |
            ## üé® Custom Model Data Addition
            
            Resolves #${{ env.ISSUE_NUMBER }}
            
            ### Details
            
            - **Materials**: `${{ steps.parse.outputs.materials }}`
            - **Custom Model Data**: `${{ steps.parse.outputs.custom_model_data }}`
            - **Source Image**: ${{ steps.parse.outputs.image_url }}
            
            ### Preview (256√ó256, pixel-perfect)
            
            ![Custom Model Preview](${{ env.PREVIEW_URL }})
            
            ---
            
            *This PR was automatically generated by GitHub Actions.*
          branch: ${{ env.PR_BRANCH }}
          delete-branch: true
          committer: GitHub Actions Bot <actions@github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Comment success on issue
        if: steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.create_pr.outputs['pull-request-number'] }}';
            const previewUrl = '${{ env.PREVIEW_URL }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚úÖ Custom model processed successfully!
            
            **Pull Request:** #${prNumber}
            
            ### Preview (256√ó256, pixel-perfect)
            
            ![Custom Model Preview](${previewUrl})
            
            Please review and merge the PR to add this custom model to the resource pack.`
            });
            
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '+1'
            });

      - name: Comment failure on issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ùå Failed to process custom model
            
            The workflow encountered an error. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            
            ### Next steps
            
            1. Review the error in the logs
            2. Fix any issues with the provided information
            3. **Create a new issue** with the correct details
            
            ‚ö†Ô∏è **Note:** Do not edit this issue. Editing does not re-trigger the workflow.`
            });
            
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '-1'
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
