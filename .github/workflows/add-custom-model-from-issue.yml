name: Add Custom Model from Issue

on:
  issues:
    types: [opened, edited]

jobs:
  parse-and-add:
    if: contains(github.event.issue.labels.*.name, 'custom-model')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;

            // Parse materials (required) - matches "### Materials\n\nvalue"
            const materialsMatch = issueBody.match(/###\s*Materials\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!materialsMatch) {
              core.setFailed('Materials field not found in issue');
              return;
            }
            const materials = materialsMatch[1].trim();

            // Parse custom model data (required)
            const cmdMatch = issueBody.match(/###\s*Custom Model Data\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!cmdMatch) {
              core.setFailed('Custom Model Data field not found in issue');
              return;
            }
            const customModelData = cmdMatch[1].trim();
            if (customModelData === '_No response_' || customModelData === '') {
              core.setFailed('Custom Model Data is required');
              return;
            }

            // Parse image URL (required) - supports both plain URLs and img tags
            const imageMatch = issueBody.match(/###\s*Image\s*\n\s*(.+?)(?:\n\n###|\n\s*\n|$)/is);
            if (!imageMatch) {
              core.setFailed('Image field not found in issue');
              return;
            }
            let imageContent = imageMatch[1].trim();

            // Extract URL from img tag if present
            const imgTagMatch = imageContent.match(/<img[^>]+src="([^"]+)"/i);
            const imageUrl = imgTagMatch ? imgTagMatch[1] : imageContent;

            if (!imageUrl || imageUrl === '_No response_') {
              core.setFailed('Image URL is required');
              return;
            }

            core.setOutput('materials', materials);
            core.setOutput('custom_model_data', customModelData);
            core.setOutput('image_url', imageUrl);

            // Add reaction to show processing started
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: 'rocket'
            });

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Download image
        run: |
          IMAGE_URL="${{ steps.parse.outputs.image_url }}"
          IMAGE_NAME="${{ steps.parse.outputs.custom_model_data }}.png"

          # Check if URL is from GitHub user-attachments (private assets)
          if [[ "$IMAGE_URL" == *"https://github.com/user-attachments/assets/"* ]]; then
            echo "Detected GitHub private asset, using authentication..."
            HTTP_CODE=$(curl -H "Authorization: token ${{ secrets.ATTACHMENT_TOKEN }}" \
                             -H "Accept: application/vnd.github.v3+json" \
                             -L -w "%{http_code}" -o "$IMAGE_NAME" "$IMAGE_URL")
          else
            echo "Public URL detected, downloading without authentication..."
            HTTP_CODE=$(curl -L -w "%{http_code}" -o "$IMAGE_NAME" "$IMAGE_URL")
          fi

          # Check if download was successful
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error: Failed to download image. HTTP status: $HTTP_CODE"
            rm -f "$IMAGE_NAME"
            exit 1
          fi

          # Verify it's actually a PNG file
          if ! file "$IMAGE_NAME" | grep -q "PNG image"; then
            echo "Error: Downloaded file is not a valid PNG image"
            echo "Content preview:"
            cat "$IMAGE_NAME" | head -5
            rm -f "$IMAGE_NAME"
            exit 1
          fi

          echo "Successfully downloaded and validated PNG image"
          echo "IMAGE_FILE=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build tool
        run: cargo build --release

      - name: Run processor
        run: |
          MATERIALS="${{ steps.parse.outputs.materials }}"
          CUSTOM_MODEL_DATA="${{ steps.parse.outputs.custom_model_data }}"

          # Split materials by comma and build arguments
          ARGS=""
          IFS=',' read -ra MATERIAL_ARRAY <<< "$MATERIALS"
          for material in "${MATERIAL_ARRAY[@]}"; do
            material=$(echo "$material" | xargs)  # trim whitespace
            ARGS="$ARGS -m $material"
          done

          # Run the processor
          ./target/release/processer $ARGS -c "$CUSTOM_MODEL_DATA" "$IMAGE_FILE"

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add custom model data from issue #${{ github.event.issue.number }}"
          title: "Add custom model: ${{ steps.parse.outputs.custom_model_data }}"
          body: |
            ## Custom Model Data Addition

            Resolves #${{ github.event.issue.number }}

            - **Materials**: ${{ steps.parse.outputs.materials }}
            - **Custom Model Data**: ${{ steps.parse.outputs.custom_model_data }}
            - **Image**: ${{ steps.parse.outputs.image_url }}

            This PR was automatically generated from the issue.
          branch: custom-model/issue-${{ github.event.issue.number }}
          delete-branch: true
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>

      - name: Comment on issue
        if: steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Custom model data has been processed!\n\nPull Request: #${{ steps.create_pr.outputs.pull-request-number }}\n\nPlease review and merge the PR to add the custom model data.`
            });

            // Add success reaction
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '+1'
            });

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ Failed to process custom model data. Please check the workflow logs for details.`
            });

            // Add failure reaction
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '-1'
            });
